[{"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\index.js":"1","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\App.js":"2","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\serviceWorker.js":"3","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\app\\store.js":"4","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\features\\counter\\Counter.js":"5","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\features\\counter\\counterSlice.js":"6","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\axios.js":"7","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Board.js":"8","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Card.js":"9","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\SummaryContainer\\SummaryContainer.js":"10","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\ModuleContainer\\ModuleContainer.js":"11","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Summary\\Summary.js":"12","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Module\\Module.js":"13","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\FormElement\\Input\\Input.js":"14","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\PlanCard\\PlanCard.js":"15"},{"size":644,"mtime":1610095066565,"results":"16","hashOfConfig":"17"},{"size":1439,"mtime":1610101945748,"results":"18","hashOfConfig":"17"},{"size":5141,"mtime":1610074868790,"results":"19","hashOfConfig":"17"},{"size":206,"mtime":1610074868790,"results":"20","hashOfConfig":"17"},{"size":1626,"mtime":1610074868790,"results":"21","hashOfConfig":"17"},{"size":1551,"mtime":1610074868790,"results":"22","hashOfConfig":"17"},{"size":175,"mtime":1610101945749,"results":"23","hashOfConfig":"17"},{"size":642,"mtime":1610101945750,"results":"24","hashOfConfig":"17"},{"size":651,"mtime":1610101945751,"results":"25","hashOfConfig":"17"},{"size":789,"mtime":1610095397080,"results":"26","hashOfConfig":"17"},{"size":10917,"mtime":1610103886130,"results":"27","hashOfConfig":"17"},{"size":3448,"mtime":1610099714844,"results":"28","hashOfConfig":"17"},{"size":289,"mtime":1610095066558,"results":"29","hashOfConfig":"17"},{"size":2057,"mtime":1610091076173,"results":"30","hashOfConfig":"17"},{"size":830,"mtime":1610095066563,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"zsibd1",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\index.js",[],["66","67"],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\App.js",["68","69","70"],"import React, { Component } from \"react\";\r\nimport { Counter } from \"./features/counter/Counter\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from \"./axios.js\";\r\n\r\nimport classes from \"./App.module.css\";\r\n\r\nimport ModuleContainer from \"./components/ModuleContainer/ModuleContainer\";\r\nimport SummaryContainer from \"./components/SummaryContainer/SummaryContainer\";\r\nimport PlanCard from \"./components/PlanCard/PlanCard\";\r\n\r\nclass App extends Component {\r\n    axiosTestPostRequest = () => {\r\n        const module = {\r\n            credits: 4,\r\n            name: \"GES1035\",\r\n            prerequisites: [\"GEQ1000\", \"GER1000\"],\r\n        };\r\n        axios\r\n            .post(\"/modulePost.json\", module)\r\n            .then((response) => console.log(response))\r\n            .catch((error) => console.log(error));\r\n    };\r\n\r\n    axiosTestGetRequest = () => {\r\n        axios\r\n            .get(\"modulePost.json\")\r\n            .then((response) => console.log(response))\r\n            .catch((error) => console.log(error));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className={classes.ModuleContainer}>\r\n                    <ModuleContainer />\r\n                </div>\r\n                <div className={classes.SummaryContainer}>\r\n                    <SummaryContainer />\r\n                </div>\r\n                {/* <PlanCard /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\serviceWorker.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\app\\store.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\features\\counter\\Counter.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\features\\counter\\counterSlice.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\axios.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Board.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Card.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\SummaryContainer\\SummaryContainer.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\ModuleContainer\\ModuleContainer.js",["71","72","73","74","75"],"import React, { Component } from \"react\";\r\nimport axios from \"../../axios.js\";\r\n\r\nimport classes from \"./ModuleContainer.module.css\";\r\nimport { TextField, InputLabel, Select, MenuItem } from \"@material-ui/core\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport Module from \"../Module/Module\";\r\nimport Card from \"../Card\";\r\nimport Board from \"../Board\";\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n\r\n  return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n  const sourceClone = Array.from(source);\r\n  const destClone = Array.from(destination);\r\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n  if (destClone.length !== 0) {\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n  } else {\r\n    destClone.push(removed);\r\n  }\r\n\r\n  const result = {};\r\n  result[droppableSource.droppableId] = sourceClone;\r\n  result[droppableDestination.droppableId] = destClone;\r\n\r\n  return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: 8 * 2,\r\n  margin: `0 ${8}px 0 0`,\r\n  height: `20px`,\r\n\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\n\r\nconst getPlanStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  alignContent: \"flex-start\",\r\n  padding: 8,\r\n  overflow: \"auto\",\r\n  border: \"2px solid black\",\r\n  height: \"450px\",\r\n  width: \"250px\",\r\n  padding: \"20px\",\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n  display: \"flex\",\r\n  padding: 8,\r\n  flexWrap: \"wrap\",\r\n  alignContent: \"flex-start\",\r\n  border: \"2px solid black\",\r\n  width: \"70%\",\r\n  float: \"left\",\r\n  height: \"450px\",\r\n  padding: \"20px\",\r\n});\r\n\r\nclass ModuleContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      dropdown: [\r\n        \"Foundation\",\r\n        \"Math and Science\",\r\n        \"IT Professionalism\",\r\n        \"Team Project\",\r\n        \"Industrial Experience\",\r\n        \"University Level Requirements\",\r\n        \"Unrestricted Electives\",\r\n        \"Algorithms & Theory\",\r\n        \"Artificial Intelligence\",\r\n        \"Computer Graphics & Games\",\r\n        \"Computer Security\",\r\n        \"Database Systems\",\r\n        \"Multimedia Information Retrieval\",\r\n        \"Networking & Distributed Systems\",\r\n        \"Parallel Computing\",\r\n        \"Programming Languages\",\r\n        \"Software Engineering\",\r\n      ],\r\n      currentField: \"\",\r\n      modules: [\r\n        {\r\n          code: \"CS1231S\",\r\n          credits: 4,\r\n          name: \"Discrete Structures\",\r\n          prerequisites: \"none\",\r\n          sem: 0,\r\n        },\r\n        {\r\n          code: \"CS1101\",\r\n          credits: 4,\r\n          name: \"Programming Methodology\",\r\n          prerequisites: \"none\",\r\n          sem: 0,\r\n        },\r\n      ],\r\n      plan: [],\r\n    };\r\n    this.onDragEnd = this.onDragEnd.bind(this);\r\n  }\r\n\r\n  onModuleFieldHandler = (event) => {\r\n    this.setState({ currentField: event.target.value });\r\n    let stringToPost = \"\";\r\n    if (event.target.value === \"Foundation\") {\r\n      stringToPost = \"foundation\";\r\n    } else if (event.target.value === \"Math and Science\") {\r\n      stringToPost = \"mathscience\";\r\n    } else if (event.target.value === \"IT Professionalism\") {\r\n      stringToPost = \"itprofessionalism\";\r\n    } else if (event.target.value === \"University Level Requirements\") {\r\n      stringToPost = \"unrestrictedelectives\";\r\n    } else if (event.target.value === \"Unrestricted Electives\") {\r\n      stringToPost = \"universitylevelrequirements\";\r\n    } else if (event.target.value === \"Team Project\") {\r\n      stringToPost = \"teamproject\";\r\n    } else if (event.target.value === \"Industrial Experience\") {\r\n      stringToPost = \"industrial\";\r\n    } else if (event.target.value === \"Algorithms & Theory\") {\r\n      stringToPost = \"focusareas/algorithmsandtheory\";\r\n    } else if (event.target.value === \"Artificial Intelligence\") {\r\n      stringToPost = \"focusareas/artificialintelligence\";\r\n    } else if (event.target.value === \"Computer Graphics & Games\") {\r\n      stringToPost = \"focusareas/computergraphicsandgames\";\r\n    } else if (event.target.value === \"Computer Security\") {\r\n      stringToPost = \"focusareas/computersecurity\";\r\n    } else if (event.target.value === \"Database Systems\") {\r\n      stringToPost = \"focusareas/databasesystems\";\r\n    } else if (event.target.value === \"Multimedia Information Retrieval\") {\r\n      stringToPost = \"focusareas/multimedia\";\r\n    } else if (event.target.value === \"Networking & Distributed Systems\") {\r\n      stringToPost = \"focusareas/networkinganddistributedsystems\";\r\n    } else if (event.target.value === \"Parallel Computing\") {\r\n      stringToPost = \"focusareas/parallelcomputing\";\r\n    } else if (event.target.value === \"Programming Languages\") {\r\n      stringToPost = \"focusareas/programminglanguages\";\r\n    } else if (event.target.value === \"Software Engineering\") {\r\n      stringToPost = \"focusareas/softwareengineering\";\r\n    }\r\n    axios\r\n      .get(`${stringToPost}.json`)\r\n      .then((response) => {\r\n        if (response.data.primaries !== undefined) {\r\n          let newModules = Object.values(response.data.primaries);\r\n          if (response.data.electives !== undefined) {\r\n            let electives = Object.values(response.data.electives);\r\n            for (let i = 0; i < electives.length; i++) {\r\n              newModules.push(electives[i]);\r\n            }\r\n          }\r\n          this.setState({\r\n            modules: newModules,\r\n          });\r\n          console.log(newModules);\r\n        } else {\r\n          this.setState({\r\n            modules: Object.values(response.data),\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  id2List = {\r\n    droppable: \"modules\",\r\n    droppable2: \"plan\",\r\n  };\r\n\r\n  getList = (id) => this.state[this.id2List[id]];\r\n\r\n  onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      const newModules = reorder(\r\n        this.getList(source.droppableId),\r\n        source.index,\r\n        destination.index\r\n      );\r\n\r\n      // if (source.droppableId === \"droppable2\") {\r\n      //     this.setState({ plan: newModules });\r\n      // } else {\r\n      //     this.setState({ modules: newModules }); //maybe no need this cause we dont have to reorder in the all-module section\r\n      // }\r\n    } else {\r\n      const result = move(\r\n        this.getList(source.droppableId),\r\n        this.getList(destination.droppableId),\r\n        source,\r\n        destination\r\n      );\r\n\r\n      this.setState({\r\n        modules: result.droppable,\r\n        plan: result.droppable2,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let modules;\r\n    modules = this.state.modules.map((module) => {\r\n      return (\r\n        <Board id={module.code} className=\"board\">\r\n          <Card id=\"card-1\" className=\"card\" draggable=\"true\">\r\n            <Module moduleCode={module.code} />\r\n          </Card>\r\n        </Board>\r\n      );\r\n    });\r\n\r\n    let moduleFields;\r\n    moduleFields = this.state.dropdown.map((field) => {\r\n      return (\r\n        <MenuItem key={field} value={field}>\r\n          {field}\r\n        </MenuItem>\r\n      );\r\n    });\r\n\r\n    console.log(modules);\r\n\r\n    return (\r\n      <DragDropContext onDragEnd={this.onDragEnd}>\r\n        <div className={classes.ModuleContainer}>\r\n          <div className={classes.Dropdown}>\r\n            <TextField\r\n              id=\"standard-select-field\"\r\n              select\r\n              value={this.state.currentField}\r\n              onChange={this.onModuleFieldHandler}\r\n              helperText=\"Please select your area of interest\"\r\n            >\r\n              {moduleFields}\r\n            </TextField>\r\n          </div>\r\n          <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getListStyle(snapshot.isDraggingOver)}\r\n                {...provided.droppableProps}\r\n              >\r\n                {this.state.modules.map((module, index) => (\r\n                  <Draggable\r\n                    key={module.code}\r\n                    draggableId={module.code}\r\n                    index={index}\r\n                  >\r\n                    {(provided, snapshot) => (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        style={getItemStyle(\r\n                          snapshot.isDragging,\r\n                          provided.draggableProps.style\r\n                        )}\r\n                      >\r\n                        {module.code}\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n        <div className={classes.PlanCardContainer}>\r\n          <Droppable droppableId=\"droppable2\" direction=\"vertical\">\r\n            {(provided, snapshot) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                style={getPlanStyle(snapshot.isDraggingOver)}\r\n              >\r\n                {this.state.plan\r\n                  ? this.state.plan.map((module, index) => (\r\n                      <Draggable\r\n                        key={module.code}\r\n                        draggableId={module.code}\r\n                        index={index}\r\n                      >\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            style={getItemStyle(\r\n                              snapshot.isDragging,\r\n                              provided.draggableProps.style\r\n                            )}\r\n                          >\r\n                            {module.code}\r\n                          </div>\r\n                        )}\r\n                      </Draggable>\r\n                    ))\r\n                  : null}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </div>\r\n      </DragDropContext>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModuleContainer;\r\n","D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Summary\\Summary.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\Module\\Module.js",[],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\FormElement\\Input\\Input.js",[],["76","77"],"D:\\HACKATHON MODULE PLANNER\\hackathon\\src\\components\\PlanCard\\PlanCard.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":17},{"ruleId":"82","severity":1,"message":"86","line":3,"column":10,"nodeType":"84","messageId":"85","endLine":3,"endColumn":16},{"ruleId":"82","severity":1,"message":"87","line":10,"column":8,"nodeType":"84","messageId":"85","endLine":10,"endColumn":16},{"ruleId":"82","severity":1,"message":"88","line":5,"column":21,"nodeType":"84","messageId":"85","endLine":5,"endColumn":31},{"ruleId":"82","severity":1,"message":"89","line":5,"column":33,"nodeType":"84","messageId":"85","endLine":5,"endColumn":39},{"ruleId":"90","severity":1,"message":"91","line":62,"column":3,"nodeType":"92","messageId":"93","endLine":62,"endColumn":10},{"ruleId":"90","severity":1,"message":"91","line":75,"column":3,"nodeType":"92","messageId":"93","endLine":75,"endColumn":10},{"ruleId":"82","severity":1,"message":"94","line":199,"column":13,"nodeType":"84","messageId":"85","endLine":199,"endColumn":23},{"ruleId":"78","replacedBy":"95"},{"ruleId":"80","replacedBy":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'Counter' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'PlanCard' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","'newModules' is assigned a value but never used.",["97"],["98"],"no-global-assign","no-unsafe-negation"]