[{"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\index.js":"1","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\App.js":"2","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\serviceWorker.js":"3","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\app\\store.js":"4","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\axios.js":"5","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Board.js":"6","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Card.js":"7","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\features\\counter\\Counter.js":"8","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\features\\counter\\counterSlice.js":"9","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\SummaryContainer\\SummaryContainer.js":"10","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Module\\Module.js":"11","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\ModuleContainer\\ModuleContainer.js":"12","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\PlanCard\\PlanCard.js":"13","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Summary\\Summary.js":"14"},{"size":644,"mtime":1610082751468,"results":"15","hashOfConfig":"16"},{"size":1283,"mtime":1610102551400,"results":"17","hashOfConfig":"16"},{"size":5141,"mtime":1610082751473,"results":"18","hashOfConfig":"16"},{"size":206,"mtime":1610082751442,"results":"19","hashOfConfig":"16"},{"size":175,"mtime":1610102551402,"results":"20","hashOfConfig":"16"},{"size":642,"mtime":1610102551403,"results":"21","hashOfConfig":"16"},{"size":651,"mtime":1610102551404,"results":"22","hashOfConfig":"16"},{"size":1626,"mtime":1610082751457,"results":"23","hashOfConfig":"16"},{"size":1551,"mtime":1610082751462,"results":"24","hashOfConfig":"16"},{"size":789,"mtime":1610099266229,"results":"25","hashOfConfig":"16"},{"size":289,"mtime":1610098914595,"results":"26","hashOfConfig":"16"},{"size":14059,"mtime":1610107415257,"results":"27","hashOfConfig":"16"},{"size":830,"mtime":1610098914599,"results":"28","hashOfConfig":"16"},{"size":4597,"mtime":1610107415260,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1coe4bn",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\index.js",[],["60","61"],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\App.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\serviceWorker.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\app\\store.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\axios.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Board.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Card.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\features\\counter\\Counter.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\features\\counter\\counterSlice.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\SummaryContainer\\SummaryContainer.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Module\\Module.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\ModuleContainer\\ModuleContainer.js",["62"],"import React, { Component } from \"react\";\r\nimport axios from \"../../axios.js\";\r\n\r\nimport classes from \"./ModuleContainer.module.css\";\r\nimport { TextField, MenuItem } from \"@material-ui/core\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nimport Module from \"../Module/Module\";\r\nimport Card from \"../Card\";\r\nimport Board from \"../Board\";\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    if (destClone.length !== 0) {\r\n        destClone.splice(droppableDestination.index, 0, removed);\r\n    } else {\r\n        destClone.push(removed);\r\n    }\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: \"none\",\r\n    padding: \"16px\",\r\n    margin: `0 8px 8px 8px`,\r\n    height: `20px`,\r\n\r\n    // change background colour if dragging\r\n    background: isDragging ? \"lightgreen\" : \"grey\",\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n});\r\n\r\nconst getPlanStyle = (isDraggingOver) => ({\r\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    alignContent: \"flex-start\",\r\n    overflow: \"auto\",\r\n    border: \"2px solid black\",\r\n    height: \"450px\",\r\n    width: \"90px\",\r\n    padding: \"20px\",\r\n});\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    alignContent: \"flex-start\",\r\n    border: \"2px solid black\",\r\n    width: \"70%\",\r\n    float: \"left\",\r\n    height: \"450px\",\r\n    padding: \"20px\",\r\n});\r\n\r\nclass ModuleContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropdown: [\r\n                \"Foundation\",\r\n                \"Math and Science\",\r\n                \"IT Professionalism\",\r\n                \"Team Project\",\r\n                \"Industrial Experience\",\r\n                \"University Level Requirements\",\r\n                \"Unrestricted Electives\",\r\n                \"Algorithms & Theory\",\r\n                \"Artificial Intelligence\",\r\n                \"Computer Graphics & Games\",\r\n                \"Computer Security\",\r\n                \"Database Systems\",\r\n                \"Multimedia Information Retrieval\",\r\n                \"Networking & Distributed Systems\",\r\n                \"Parallel Computing\",\r\n                \"Programming Languages\",\r\n                \"Software Engineering\",\r\n            ],\r\n            currentField: \"\",\r\n            modules: [],\r\n            plan: [],\r\n        };\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    onModuleFieldHandler = (event) => {\r\n        this.setState({ currentField: event.target.value });\r\n        let stringToPost = \"\";\r\n        if (event.target.value === \"Foundation\") {\r\n            stringToPost = \"foundation\";\r\n        } else if (event.target.value === \"Math and Science\") {\r\n            stringToPost = \"mathscience\";\r\n        } else if (event.target.value === \"IT Professionalism\") {\r\n            stringToPost = \"itprofessionalism\";\r\n        } else if (event.target.value === \"University Level Requirements\") {\r\n            stringToPost = \"unrestrictedelectives\";\r\n        } else if (event.target.value === \"Unrestricted Electives\") {\r\n            stringToPost = \"universitylevelrequirements\";\r\n        } else if (event.target.value === \"Team Project\") {\r\n            stringToPost = \"teamproject\";\r\n        } else if (event.target.value === \"Industrial Experience\") {\r\n            stringToPost = \"industrial\";\r\n        } else if (event.target.value === \"Algorithms & Theory\") {\r\n            stringToPost = \"focusareas/algorithmsandtheory\";\r\n        } else if (event.target.value === \"Artificial Intelligence\") {\r\n            stringToPost = \"focusareas/artificialintelligence\";\r\n        } else if (event.target.value === \"Computer Graphics & Games\") {\r\n            stringToPost = \"focusareas/computergraphicsandgames\";\r\n        } else if (event.target.value === \"Computer Security\") {\r\n            stringToPost = \"focusareas/computersecurity\";\r\n        } else if (event.target.value === \"Database Systems\") {\r\n            stringToPost = \"focusareas/databasesystems\";\r\n        } else if (event.target.value === \"Multimedia Information Retrieval\") {\r\n            stringToPost = \"focusareas/multimedia\";\r\n        } else if (event.target.value === \"Networking & Distributed Systems\") {\r\n            stringToPost = \"focusareas/networkinganddistributedsystems\";\r\n        } else if (event.target.value === \"Parallel Computing\") {\r\n            stringToPost = \"focusareas/parallelcomputing\";\r\n        } else if (event.target.value === \"Programming Languages\") {\r\n            stringToPost = \"focusareas/programminglanguages\";\r\n        } else if (event.target.value === \"Software Engineering\") {\r\n            stringToPost = \"focusareas/softwareengineering\";\r\n        }\r\n        axios\r\n            .get(`${stringToPost}.json`)\r\n            .then((response) => {\r\n                if (response.data.primaries !== undefined) {\r\n                    let newModules = Object.values(response.data.primaries);\r\n                    if (response.data.electives !== undefined) {\r\n                        let electives = Object.values(response.data.electives);\r\n                        for (let i = 0; i < electives.length; i++) {\r\n                            newModules.push(electives[i]);\r\n                        }\r\n                    }\r\n                    for (let j = 0; j < newModules.length; j++) {\r\n                        for (let i = 0; i < this.state.plan.length; i++) {\r\n                            if (\r\n                                this.state.plan[i].code === newModules[j].code\r\n                            ) {\r\n                                newModules.splice(j, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        modules: newModules,\r\n                    });\r\n                    console.log(newModules);\r\n                } else {\r\n                    let modulesCheck = Object.values(response.data);\r\n                    for (let j = 0; j < modulesCheck.length; j++) {\r\n                        for (let i = 0; i < this.state.plan.length; i++) {\r\n                            if (\r\n                                this.state.plan[i].code === modulesCheck[j].code\r\n                            ) {\r\n                                modulesCheck.splice(j, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.setState({\r\n                        modules: modulesCheck,\r\n                    });\r\n                }\r\n            })\r\n            .catch((error) => console.log(error));\r\n    };\r\n\r\n    id2List = {\r\n        droppable: \"modules\",\r\n        droppable2: \"plan\",\r\n    };\r\n\r\n    getList = (id) => this.state[this.id2List[id]];\r\n\r\n    onDragEnd = (result) => {\r\n        const { source, destination } = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const newModules = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            // if (source.droppableId === \"droppable2\") {\r\n            //     this.setState({ plan: newModules });\r\n            // } else {\r\n            //     this.setState({ modules: newModules }); //maybe no need this cause we dont have to reorder in the all-module section\r\n            // }\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n\r\n            this.setState({\r\n                modules: result.droppable,\r\n                plan: result.droppable2,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let modules;\r\n        modules = this.state.modules.map((module) => {\r\n            return (\r\n                <Board id={module.code} className=\"board\">\r\n                    <Card id=\"card-1\" className=\"card\" draggable=\"true\">\r\n                        <Module moduleCode={module.code} />\r\n                    </Card>\r\n                </Board>\r\n            );\r\n        });\r\n\r\n        let moduleFields;\r\n        moduleFields = this.state.dropdown.map((field) => {\r\n            return (\r\n                <MenuItem key={field} value={field}>\r\n                    {field}\r\n                </MenuItem>\r\n            );\r\n        });\r\n\r\n        console.log(modules);\r\n\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div className={classes.ModuleContainer}>\r\n                    <div className={classes.Dropdown}>\r\n                        <TextField\r\n                            id=\"standard-select-field\"\r\n                            select\r\n                            value={this.state.currentField}\r\n                            onChange={this.onModuleFieldHandler}\r\n                            helperText=\"Please select your area of interest\"\r\n                        >\r\n                            {moduleFields}\r\n                        </TextField>\r\n                    </div>\r\n                    <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}\r\n                                {...provided.droppableProps}\r\n                            >\r\n                                {this.state.modules.map((module, index) => (\r\n                                    <Draggable\r\n                                        key={module.code}\r\n                                        draggableId={module.code}\r\n                                        index={index}\r\n                                    >\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps\r\n                                                        .style\r\n                                                )}\r\n                                            >\r\n                                                {module.code}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n                <div className={classes.PlanCardContainer}>\r\n                    <Droppable droppableId=\"droppable2\" direction=\"vertical\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getPlanStyle(snapshot.isDraggingOver)}\r\n                            >\r\n                                {this.state.plan\r\n                                    ? this.state.plan.map((module, index) => (\r\n                                          <Draggable\r\n                                              key={module.code}\r\n                                              draggableId={module.code}\r\n                                              index={index}\r\n                                          >\r\n                                              {(provided, snapshot) => (\r\n                                                  <div\r\n                                                      ref={provided.innerRef}\r\n                                                      {...provided.draggableProps}\r\n                                                      {...provided.dragHandleProps}\r\n                                                      style={getItemStyle(\r\n                                                          snapshot.isDragging,\r\n                                                          provided\r\n                                                              .draggableProps\r\n                                                              .style\r\n                                                      )}\r\n                                                  >\r\n                                                      {module.code}\r\n                                                  </div>\r\n                                              )}\r\n                                          </Draggable>\r\n                                      ))\r\n                                    : null}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModuleContainer;\r\n","C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\PlanCard\\PlanCard.js",[],"C:\\Users\\Jiawe\\Desktop\\Jia Wei Uni Documents\\HacknRoll21\\source code\\src\\components\\Summary\\Summary.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":196,"column":13,"nodeType":"69","messageId":"70","endLine":196,"endColumn":23},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"no-unused-vars","'newModules' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]